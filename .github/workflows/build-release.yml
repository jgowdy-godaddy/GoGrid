name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: '0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-macos:
    name: Build macOS (ARM64 & x86_64)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler (ARM64)
        run: |
          cargo build --release --bin corpgrid-scheduler --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/corpgrid-scheduler target/release/corpgrid-scheduler-aarch64-apple-darwin

      - name: Build scheduler (x86_64)
        run: |
          cargo build --release --bin corpgrid-scheduler --target x86_64-apple-darwin
          cp target/x86_64-apple-darwin/release/corpgrid-scheduler target/release/corpgrid-scheduler-x86_64-apple-darwin

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '^2.0.0'

      - name: Build Tauri app (ARM64)
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build --target aarch64-apple-darwin

      - name: Build Tauri app (x86_64)
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build --target x86_64-apple-darwin

      - name: Package for updates (ARM64)
        run: |
          cd target/aarch64-apple-darwin/release/bundle/macos
          tar -czf "GoGrid_Worker_${{ github.event.inputs.version || '0.1.0' }}_aarch64.app.tar.gz" "GoGrid Worker.app"

      - name: Package for updates (x86_64)
        run: |
          cd target/x86_64-apple-darwin/release/bundle/macos
          tar -czf "GoGrid_Worker_${{ github.event.inputs.version || '0.1.0' }}_x64.app.tar.gz" "GoGrid Worker.app"

      - name: Upload macOS ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64
          path: |
            target/aarch64-apple-darwin/release/bundle/macos/GoGrid_Worker_*.app.tar.gz
            target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

      - name: Upload macOS x86_64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64
          path: |
            target/x86_64-apple-darwin/release/bundle/macos/GoGrid_Worker_*.app.tar.gz
            target/x86_64-apple-darwin/release/bundle/dmg/*.dmg

  build-linux:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.16
        with:
          cuda: '12.4.0'
          method: 'network'

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler with CUDA
        run: |
          cargo build --release --bin corpgrid-scheduler --features cuda
          cp target/release/corpgrid-scheduler target/release/corpgrid-scheduler-x86_64-unknown-linux-gnu

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '^2.0.0'

      - name: Build Tauri app
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build

      - name: Package for updates
        run: |
          cd target/release/bundle/appimage
          tar -czf "GoGrid_Worker_${{ github.event.inputs.version || '0.1.0' }}_amd64.AppImage.tar.gz" *.AppImage

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: |
            target/release/bundle/appimage/GoGrid_Worker_*.AppImage.tar.gz
            target/release/bundle/appimage/*.AppImage
            target/release/bundle/deb/*.deb

  build-windows:
    name: Build Windows (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler
        run: |
          cargo build --release --bin corpgrid-scheduler
          copy target\release\corpgrid-scheduler.exe target\release\corpgrid-scheduler-x86_64-pc-windows-msvc.exe

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '^2.0.0'

      - name: Build Tauri app
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build

      - name: Package for updates (NSIS)
        run: |
          cd target\release\bundle\nsis
          tar -czf "GoGrid_Worker_${{ github.event.inputs.version || '0.1.0' }}_x64-setup.nsis.zip" *.exe
        shell: bash

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: |
            target/release/bundle/nsis/GoGrid_Worker_*.nsis.zip
            target/release/bundle/nsis/*.exe
            target/release/bundle/msi/*.msi

  create-release:
    name: Create GitHub Release
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-server:
    name: Deploy to Update Server
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.COORDINATOR_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to update server
        run: |
          # Create updates directory
          ssh ${{ secrets.COORDINATOR_HOST }} "sudo mkdir -p /opt/gogrid/updates && sudo chown $USER:$USER /opt/gogrid/updates"

          # Upload all update packages
          scp artifacts/**/*.tar.gz ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/updates/
          scp artifacts/**/*.zip ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/updates/

          # Upload installer files
          scp artifacts/**/*.dmg ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/updates/ || true
          scp artifacts/**/*.AppImage ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/updates/ || true
          scp artifacts/**/*.exe ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/updates/ || true

          # Build and deploy coordinator
          cargo build --release --bin gogrid-coordinator
          scp target/release/gogrid-coordinator ${{ secrets.COORDINATOR_HOST }}:/opt/gogrid/bin/

          # Restart coordinator
          ssh ${{ secrets.COORDINATOR_HOST }} "sudo systemctl restart gogrid-coordinator"

          echo "Deployment complete!"
          echo "Downloads available at: https://${{ secrets.COORDINATOR_HOST }}:8443/downloads"
