# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import scheduler_pb2 as scheduler__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in scheduler_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SchedulerStub(object):
    """Scheduler service for agents to poll for work and submit heartbeats
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/corpgrid.scheduler.Scheduler/RegisterAgent',
                request_serializer=scheduler__pb2.RegisterAgentRequest.SerializeToString,
                response_deserializer=scheduler__pb2.RegisterAgentResponse.FromString,
                _registered_method=True)
        self.PollJobs = channel.unary_unary(
                '/corpgrid.scheduler.Scheduler/PollJobs',
                request_serializer=scheduler__pb2.PollJobsRequest.SerializeToString,
                response_deserializer=scheduler__pb2.PollJobsResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/corpgrid.scheduler.Scheduler/Heartbeat',
                request_serializer=scheduler__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=scheduler__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.SubmitResult = channel.unary_unary(
                '/corpgrid.scheduler.Scheduler/SubmitResult',
                request_serializer=scheduler__pb2.SubmitResultRequest.SerializeToString,
                response_deserializer=scheduler__pb2.SubmitResultResponse.FromString,
                _registered_method=True)
        self.ReportCheckpoint = channel.unary_unary(
                '/corpgrid.scheduler.Scheduler/ReportCheckpoint',
                request_serializer=scheduler__pb2.ReportCheckpointRequest.SerializeToString,
                response_deserializer=scheduler__pb2.ReportCheckpointResponse.FromString,
                _registered_method=True)


class SchedulerServicer(object):
    """Scheduler service for agents to poll for work and submit heartbeats
    """

    def RegisterAgent(self, request, context):
        """Agent registers and gets assigned work
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollJobs(self, request, context):
        """Agent polls for new jobs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Agent sends heartbeat for active job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitResult(self, request, context):
        """Agent submits job result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportCheckpoint(self, request, context):
        """Agent reports checkpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=scheduler__pb2.RegisterAgentRequest.FromString,
                    response_serializer=scheduler__pb2.RegisterAgentResponse.SerializeToString,
            ),
            'PollJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.PollJobs,
                    request_deserializer=scheduler__pb2.PollJobsRequest.FromString,
                    response_serializer=scheduler__pb2.PollJobsResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=scheduler__pb2.HeartbeatRequest.FromString,
                    response_serializer=scheduler__pb2.HeartbeatResponse.SerializeToString,
            ),
            'SubmitResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitResult,
                    request_deserializer=scheduler__pb2.SubmitResultRequest.FromString,
                    response_serializer=scheduler__pb2.SubmitResultResponse.SerializeToString,
            ),
            'ReportCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportCheckpoint,
                    request_deserializer=scheduler__pb2.ReportCheckpointRequest.FromString,
                    response_serializer=scheduler__pb2.ReportCheckpointResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'corpgrid.scheduler.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('corpgrid.scheduler.Scheduler', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Scheduler service for agents to poll for work and submit heartbeats
    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.Scheduler/RegisterAgent',
            scheduler__pb2.RegisterAgentRequest.SerializeToString,
            scheduler__pb2.RegisterAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PollJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.Scheduler/PollJobs',
            scheduler__pb2.PollJobsRequest.SerializeToString,
            scheduler__pb2.PollJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.Scheduler/Heartbeat',
            scheduler__pb2.HeartbeatRequest.SerializeToString,
            scheduler__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.Scheduler/SubmitResult',
            scheduler__pb2.SubmitResultRequest.SerializeToString,
            scheduler__pb2.SubmitResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.Scheduler/ReportCheckpoint',
            scheduler__pb2.ReportCheckpointRequest.SerializeToString,
            scheduler__pb2.ReportCheckpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelHostingStub(object):
    """Model hosting service for LLM inference (server-side)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoadModel = channel.unary_unary(
                '/corpgrid.scheduler.ModelHosting/LoadModel',
                request_serializer=scheduler__pb2.LoadModelRequest.SerializeToString,
                response_deserializer=scheduler__pb2.LoadModelResponse.FromString,
                _registered_method=True)
        self.UnloadModel = channel.unary_unary(
                '/corpgrid.scheduler.ModelHosting/UnloadModel',
                request_serializer=scheduler__pb2.UnloadModelRequest.SerializeToString,
                response_deserializer=scheduler__pb2.UnloadModelResponse.FromString,
                _registered_method=True)
        self.Infer = channel.unary_unary(
                '/corpgrid.scheduler.ModelHosting/Infer',
                request_serializer=scheduler__pb2.InferRequest.SerializeToString,
                response_deserializer=scheduler__pb2.InferResponse.FromString,
                _registered_method=True)
        self.GetModelStatus = channel.unary_unary(
                '/corpgrid.scheduler.ModelHosting/GetModelStatus',
                request_serializer=scheduler__pb2.GetModelStatusRequest.SerializeToString,
                response_deserializer=scheduler__pb2.GetModelStatusResponse.FromString,
                _registered_method=True)
        self.GetClusterStatus = channel.unary_unary(
                '/corpgrid.scheduler.ModelHosting/GetClusterStatus',
                request_serializer=scheduler__pb2.GetClusterStatusRequest.SerializeToString,
                response_deserializer=scheduler__pb2.GetClusterStatusResponse.FromString,
                _registered_method=True)


class ModelHostingServicer(object):
    """Model hosting service for LLM inference (server-side)
    """

    def LoadModel(self, request, context):
        """Load a model with automatic resource allocation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadModel(self, request, context):
        """Unload a model and free resources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Infer(self, request, context):
        """Submit inference request to loaded model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelStatus(self, request, context):
        """Get status of all loaded models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterStatus(self, request, context):
        """Get cluster resource availability
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelHostingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadModel,
                    request_deserializer=scheduler__pb2.LoadModelRequest.FromString,
                    response_serializer=scheduler__pb2.LoadModelResponse.SerializeToString,
            ),
            'UnloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadModel,
                    request_deserializer=scheduler__pb2.UnloadModelRequest.FromString,
                    response_serializer=scheduler__pb2.UnloadModelResponse.SerializeToString,
            ),
            'Infer': grpc.unary_unary_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=scheduler__pb2.InferRequest.FromString,
                    response_serializer=scheduler__pb2.InferResponse.SerializeToString,
            ),
            'GetModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStatus,
                    request_deserializer=scheduler__pb2.GetModelStatusRequest.FromString,
                    response_serializer=scheduler__pb2.GetModelStatusResponse.SerializeToString,
            ),
            'GetClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterStatus,
                    request_deserializer=scheduler__pb2.GetClusterStatusRequest.FromString,
                    response_serializer=scheduler__pb2.GetClusterStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'corpgrid.scheduler.ModelHosting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('corpgrid.scheduler.ModelHosting', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelHosting(object):
    """Model hosting service for LLM inference (server-side)
    """

    @staticmethod
    def LoadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.ModelHosting/LoadModel',
            scheduler__pb2.LoadModelRequest.SerializeToString,
            scheduler__pb2.LoadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.ModelHosting/UnloadModel',
            scheduler__pb2.UnloadModelRequest.SerializeToString,
            scheduler__pb2.UnloadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Infer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.ModelHosting/Infer',
            scheduler__pb2.InferRequest.SerializeToString,
            scheduler__pb2.InferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.ModelHosting/GetModelStatus',
            scheduler__pb2.GetModelStatusRequest.SerializeToString,
            scheduler__pb2.GetModelStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/corpgrid.scheduler.ModelHosting/GetClusterStatus',
            scheduler__pb2.GetClusterStatusRequest.SerializeToString,
            scheduler__pb2.GetClusterStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
